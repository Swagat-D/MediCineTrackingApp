// Frontend: src/components/common/PrintableBarcode.tsx
import React from 'react';
import {
  View,
  Text,
  StyleSheet,
  Modal,
  TouchableOpacity,
  Alert,
  Share,
  Dimensions,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import * as Print from 'expo-print';
import { TYPOGRAPHY, SPACING, RADIUS } from '../../constants/themes/theme';

interface PrintableBarcodeProps {
  visible: boolean;
  onClose: () => void;
  patientName: string;
  barcodeData: string;
  medicationName: string;
}

const { width } = Dimensions.get('window');

const PrintableBarcode: React.FC<PrintableBarcodeProps> = ({
  visible,
  onClose,
  patientName,
  barcodeData,
  medicationName
}) => {

  const generateBarcodeStripes = () => {
    // Simple barcode visualization using the barcode data
    const stripes = [];
    for (let i = 0; i < barcodeData.length; i++) {
      const char = barcodeData.charCodeAt(i);
      const isWide = char % 2 === 0;
      stripes.push(
        <View
          key={i}
          style={[
            styles.barcodeStripe,
            {
              width: isWide ? 3 : 1,
              backgroundColor: (char % 3 === 0) ? '#000000' : 'transparent',
            }
          ]}
        />
      );
    }
    return stripes;
  };

  const handlePrint = async () => {
    try {
      const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="utf-8">
          <title>Medication Barcode - ${patientName}</title>
          <style>
            body { 
              font-family: Arial, sans-serif; 
              margin: 0; 
              padding: 20px; 
              display: flex;
              justify-content: center;
              align-items: center;
              min-height: 100vh;
            }
            .barcode-label { 
              border: 2px solid #000; 
              padding: 20px; 
              width: 300px;
              background: white; 
              text-align: center;
            }
            .patient-name { 
              font-size: 18px; 
              font-weight: bold; 
              color: #059669; 
              margin-bottom: 20px;
              text-transform: uppercase;
            }
            .barcode-visual {
              display: flex;
              justify-content: center;
              align-items: center;
              height: 60px;
              margin: 20px 0;
              background: #f0f0f0;
              border: 1px solid #ccc;
            }
            .barcode-pattern {
              display: flex;
              align-items: center;
              height: 40px;
              gap: 1px;
            }
            .stripe {
              background: #000;
              height: 100%;
            }
            .barcode-data { 
              font-family: 'Courier New', monospace; 
              font-size: 12px; 
              font-weight: bold; 
              letter-spacing: 1px; 
              margin-top: 15px;
              word-break: break-all;
              border-top: 1px solid #ddd;
              padding-top: 10px;
            }
            .footer {
              font-size: 10px;
              color: #666;
              margin-top: 10px;
            }
          </style>
        </head>
        <body>
          <div class="barcode-label">
            <div class="patient-name">${patientName}</div>
            <div class="barcode-visual">
              <div class="barcode-pattern">
                ${Array.from(barcodeData).map((char, index) => {
                  const charCode = char.charCodeAt(0);
                  const width = charCode % 2 === 0 ? 3 : 1;
                  const isVisible = charCode % 3 === 0;
                  return isVisible ? `<div class="stripe" style="width: ${width}px;"></div>` : `<div style="width: ${width}px;"></div>`;
                }).join('')}
              </div>
            </div>
            <div class="barcode-data">${barcodeData}</div>
            <div class="footer">MediTracker • ${medicationName}</div>
          </div>
        </body>
        </html>
      `;

      await Print.printAsync({ 
        html: htmlContent,
        width: 612, // A4 width in points
        height: 792, // A4 height in points
      });

      Alert.alert('Success', 'Barcode sent to printer successfully!');
    } catch (error) {
      console.error('Error printing barcode:', error);
      Alert.alert('Error', 'Failed to print barcode. Please try again.');
    }
  };

  const handleShare = async () => {
    try {
      const message = `Medication Label for ${patientName}

Barcode: ${barcodeData}
Medication: ${medicationName}

Generated by MediTracker`;

      await Share.share({ 
        message, 
        title: `${patientName} - Medication Barcode` 
      });
    } catch (error) {
      console.error('Error sharing barcode:', error);
    }
  };

  if (!visible) return null;

  return (
    <Modal
      visible={visible}
      transparent={true}
      animationType="slide"
      onRequestClose={onClose}
    >
      <View style={styles.modalOverlay}>
        <View style={styles.modalContainer}>
          {/* Header */}
          <View style={styles.modalHeader}>
            <Text style={styles.modalTitle}>Medication Barcode</Text>
            <TouchableOpacity
              style={styles.closeButton}
              onPress={onClose}
            >
              <Ionicons name="close" size={24} color="#64748B" />
            </TouchableOpacity>
          </View>

          {/* Barcode Preview */}
          <View style={styles.barcodePreview}>
            {/* Patient Name */}
            <View style={styles.patientNameContainer}>
              <Text style={styles.patientNameText}>{patientName.toUpperCase()}</Text>
            </View>

            {/* Barcode Visual */}
            <View style={styles.barcodeContainer}>
              <View style={styles.barcodeStripes}>
                {generateBarcodeStripes()}
              </View>
            </View>

            {/* Barcode Data */}
            <View style={styles.barcodeDataContainer}>
              <Text style={styles.barcodeDataText}>{barcodeData}</Text>
            </View>

            {/* Footer */}
            <View style={styles.footerContainer}>
              <Text style={styles.footerText}>MediTracker • {medicationName}</Text>
            </View>
          </View>

          {/* Action Buttons */}
          <View style={styles.actionButtons}>
            <TouchableOpacity
              style={[styles.actionButton, styles.shareButton]}
              onPress={handleShare}
            >
              <Ionicons name="share-outline" size={20} color="#8B5CF6" />
              <Text style={[styles.actionButtonText, { color: '#8B5CF6' }]}>Share</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={[styles.actionButton, styles.printButton]}
              onPress={handlePrint}
            >
              <Ionicons name="print-outline" size={20} color="#FFFFFF" />
              <Text style={[styles.actionButtonText, { color: '#FFFFFF' }]}>Print Label</Text>
            </TouchableOpacity>
          </View>

          {/* Instructions */}
          <View style={styles.instructionsContainer}>
            <Text style={styles.instructionsTitle}>Printing Instructions:</Text>
            <Text style={styles.instructionsText}>
              • Use adhesive label paper for best results{'\n'}
              • Ensure printer settings are set to actual size{'\n'}
              • Attach label to medication container{'\n'}
              • Keep barcode clean and visible
            </Text>
          </View>
        </View>
      </View>
    </Modal>
  );
};

const styles = StyleSheet.create({
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
    paddingHorizontal: SPACING[4],
  },
  modalContainer: {
    backgroundColor: '#FFFFFF',
    borderRadius: RADIUS.xl,
    padding: SPACING[6],
    width: '100%',
    maxWidth: 400,
    maxHeight: '90%',
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: SPACING[6],
  },
  modalTitle: {
    fontSize: TYPOGRAPHY.fontSize.xl,
    fontWeight: '700',
    color: '#1E293B',
  },
  closeButton: {
    width: 32,
    height: 32,
    borderRadius: 16,
    backgroundColor: '#F8FAFC',
    justifyContent: 'center',
    alignItems: 'center',
  },
  barcodePreview: {
    backgroundColor: '#FFFFFF',
    borderWidth: 2,
    borderColor: '#000000',
    borderRadius: RADIUS.md,
    padding: SPACING[4],
    marginBottom: SPACING[6],
    alignItems: 'center',
  },
  patientNameContainer: {
    marginBottom: SPACING[4],
    paddingBottom: SPACING[3],
    borderBottomWidth: 1,
    borderBottomColor: '#E2E8F0',
    width: '100%',
  },
  patientNameText: {
    fontSize: TYPOGRAPHY.fontSize.lg,
    fontWeight: '700',
    color: '#059669',
    textAlign: 'center',
    letterSpacing: 1,
  },
  barcodeContainer: {
    backgroundColor: '#F8FAFC',
    borderRadius: RADIUS.md,
    padding: SPACING[4],
    marginVertical: SPACING[4],
    borderWidth: 1,
    borderColor: '#E2E8F0',
    width: '100%',
  },
  barcodeStripes: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    height: 40,
    gap: 1,
  },
  barcodeStripe: {
    height: '100%',
  },
  barcodeDataContainer: {
    marginTop: SPACING[3],
    paddingTop: SPACING[3],
    borderTopWidth: 1,
    borderTopColor: '#E2E8F0',
    width: '100%',
  },
  barcodeDataText: {
    fontSize: TYPOGRAPHY.fontSize.sm,
    fontWeight: '600',
    color: '#1E293B',
    fontFamily: 'monospace',
    letterSpacing: 1,
    textAlign: 'center',
  },
  footerContainer: {
    marginTop: SPACING[2],
  },
  footerText: {
    fontSize: TYPOGRAPHY.fontSize.xs,
    color: '#64748B',
    textAlign: 'center',
  },
  actionButtons: {
    flexDirection: 'row',
    gap: SPACING[3],
    marginBottom: SPACING[6],
  },
  actionButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    borderRadius: RADIUS.lg,
    paddingVertical: SPACING[3],
    gap: SPACING[2],
  },
  shareButton: {
    backgroundColor: '#F3F4F6',
    borderWidth: 1,
    borderColor: '#D1D5DB',
  },
  printButton: {
    backgroundColor: '#059669',
  },
  actionButtonText: {
    fontSize: TYPOGRAPHY.fontSize.md,
    fontWeight: '600',
  },
  instructionsContainer: {
    backgroundColor: '#FFFBEB',
    borderRadius: RADIUS.lg,
    padding: SPACING[4],
    borderWidth: 1,
    borderColor: '#FDE68A',
  },
  instructionsTitle: {
    fontSize: TYPOGRAPHY.fontSize.sm,
    fontWeight: '600',
    color: '#92400E',
    marginBottom: SPACING[2],
  },
  instructionsText: {
    fontSize: TYPOGRAPHY.fontSize.xs,
    color: '#A16207',
    lineHeight: 16,
  },
});

export default PrintableBarcode;