import React, { useEffect, useState } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  TouchableOpacity,
  Alert,
  Share,
  Platform,
  RefreshControl,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { LinearGradient } from 'expo-linear-gradient';
import * as MediaLibrary from 'expo-media-library';

// Components
import CaregiverNavbar from '../../components/common/CaregiverNavbar';
import { LoadingSpinner } from '../../components/common/Loading/LoadingSpinner';
import Button from '../../components/common/Button/Button';

// Types and Constants
import { CaregiverStackScreenProps } from '../../types/navigation.types';
import { TYPOGRAPHY, SPACING, RADIUS } from '../../constants/themes/theme';
import { caregiverAPI } from '../../services/api/caregiverAPI';
import PrintableBarcode from '../../components/common/PrintableBarcode';

type Props = CaregiverStackScreenProps<'BarcodeGenerator'>;

interface BarcodeItem {
  id: string;
  patientId: string;
  patientName: string;
  medicationName: string;
  dosage: string;
  frequency: string;
  timingRelation: string;
  barcodeData: string;
  createdAt: string;
  lastDownloaded?: string;
  downloadCount: number;
}

const BarcodeGeneratorScreen: React.FC<Props> = ({ navigation }) => {
  const [isLoading, setIsLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [selectedBarcodes, setSelectedBarcodes] = useState<string[]>([]);
  const [isSelectionMode, setIsSelectionMode] = useState(false);
  const [recentBarcodes, setRecentBarcodes] = useState<BarcodeItem[]>([]);
  const [showPrintModal, setShowPrintModal] = useState(false);
const [selectedBarcode, setSelectedBarcode] = useState<BarcodeItem | null>(null);

  useEffect(() => {
    loadBarcodes();
  }, []);

  const loadBarcodes = async () => {
  try {
    setIsLoading(true);
    const data = await caregiverAPI.getBarcodes();
    setRecentBarcodes(data);
  } catch (error: any) {
    console.error('Error loading barcodes:', error);
    Alert.alert('Error', error.message || 'Failed to load barcodes.');
  } finally {
    setIsLoading(false);
  }
};

  const onRefresh = async () => {
    setRefreshing(true);
    await loadBarcodes();
    setRefreshing(false);
  };

  const handleDownloadBarcode = async (barcode: BarcodeItem) => {
    try {
      const { status } = await MediaLibrary.requestPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('Permission Required', 'Please grant permission to save images to your gallery.');
        return;
      }

      // In a real app, you would generate an actual barcode image here
      Alert.alert('Success', `Barcode for ${barcode.patientName}'s ${barcode.medicationName} saved to gallery!`);
    } catch (error) {
      console.error('Error downloading barcode:', error);
      Alert.alert('Error', 'Failed to download barcode.');
    }
  };

  const handlePrintBarcode = async (barcode: BarcodeItem) => {
  setSelectedBarcode(barcode);
  setShowPrintModal(true);
};

  const handleShareBarcode = async (barcode: BarcodeItem) => {
    try {
      const message = `Medication Barcode for ${barcode.patientName}

Medication: ${barcode.medicationName}
Dosage: ${barcode.dosage}
Frequency: ${barcode.frequency}
Timing: ${barcode.timingRelation}

Barcode: ${barcode.barcodeData}

Generated by MediTracker`;

      await Share.share({ message, title: 'Medication Barcode' });
    } catch (error) {
      console.error('Error sharing barcode:', error);
    }
  };

  const handleBulkDownload = async () => {
    if (selectedBarcodes.length === 0) return;
    
    Alert.alert(
      'Bulk Download',
      `Download ${selectedBarcodes.length} barcode${selectedBarcodes.length > 1 ? 's' : ''}?`,
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Download',
          onPress: () => {
            Alert.alert('Success', `${selectedBarcodes.length} barcodes downloaded!`);
            setSelectedBarcodes([]);
            setIsSelectionMode(false);
          },
        },
      ]
    );
  };

  const handleBulkPrint = async () => {
    if (selectedBarcodes.length === 0) return;
    
    Alert.alert(
      'Bulk Print',
      `Print ${selectedBarcodes.length} barcode${selectedBarcodes.length > 1 ? 's' : ''}?`,
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Print',
          onPress: () => {
            Alert.alert('Success', `${selectedBarcodes.length} barcodes sent to printer!`);
            setSelectedBarcodes([]);
            setIsSelectionMode(false);
          },
        },
      ]
    );
  };

  const toggleBarcodeSelection = (barcodeId: string) => {
    setSelectedBarcodes(prev => 
      prev.includes(barcodeId)
        ? prev.filter(id => id !== barcodeId)
        : [...prev, barcodeId]
    );
  };

  const formatDate = (dateString: string) => {
    const date = new Date(dateString);
    const now = new Date();
    const diffInHours = Math.floor((now.getTime() - date.getTime()) / (1000 * 60 * 60));
    
    if (diffInHours < 24) {
      return diffInHours < 1 ? 'Just now' : `${diffInHours}h ago`;
    } else {
      const diffInDays = Math.floor(diffInHours / 24);
      return diffInDays === 1 ? '1 day ago' : `${diffInDays} days ago`;
    }
  };

  const renderBarcodeCard = (barcode: BarcodeItem) => {
    const isSelected = selectedBarcodes.includes(barcode.id);
    
    return (
      <TouchableOpacity
        key={barcode.id}
        style={[styles.barcodeCard, isSelected && styles.selectedCard]}
        onPress={() => {
          if (isSelectionMode) {
            toggleBarcodeSelection(barcode.id);
          }
        }}
        onLongPress={() => {
          if (!isSelectionMode) {
            setIsSelectionMode(true);
            setSelectedBarcodes([barcode.id]);
          }
        }}
        activeOpacity={0.8}
      >
        {isSelectionMode && (
          <View style={styles.selectionIndicator}>
            <Ionicons 
              name={isSelected ? "checkmark-circle" : "ellipse-outline"} 
              size={20} 
              color={isSelected ? "#059669" : "#94A3B8"} 
            />
          </View>
        )}

        <View style={styles.barcodeHeader}>
          <View style={styles.patientInfo}>
            <Text style={styles.patientName}>{barcode.patientName}</Text>
            <Text style={styles.medicationInfo}>
              {barcode.medicationName} • {barcode.dosage}
            </Text>
            <Text style={styles.dosageDetails}>
              {barcode.frequency} • {barcode.timingRelation}
            </Text>
          </View>
          
          <View style={styles.barcodeStatus}>
            <Text style={styles.createdDate}>{formatDate(barcode.createdAt)}</Text>
            {barcode.downloadCount > 0 && (
              <View style={styles.downloadBadge}>
                <Ionicons name="download" size={12} color="#059669" />
                <Text style={styles.downloadCount}>{barcode.downloadCount}</Text>
              </View>
            )}
          </View>
        </View>

        <View style={styles.barcodeDisplay}>
          <View style={styles.barcodeStripes}>
            {Array.from({ length: 20 }).map((_, index) => (
              <View
                key={index}
                style={[
                  styles.barcodeStripe,
                  {
                    width: Math.random() > 0.5 ? 2 : 3,
                    backgroundColor: Math.random() > 0.3 ? '#1E293B' : 'transparent',
                  }
                ]}
              />
            ))}
          </View>
          <Text style={styles.barcodeText}>{barcode.barcodeData}</Text>
        </View>

        {!isSelectionMode && (
          <View style={styles.barcodeActions}>
            <TouchableOpacity
              style={styles.actionButton}
              onPress={() => handleDownloadBarcode(barcode)}
            >
              <Ionicons name="download-outline" size={16} color="#059669" />
              <Text style={styles.actionText}>Download</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.actionButton}
              onPress={() => handlePrintBarcode(barcode)}
            >
              <Ionicons name="print-outline" size={16} color="#0EA5E9" />
              <Text style={styles.actionText}>Print</Text>
            </TouchableOpacity>

            <TouchableOpacity
              style={styles.actionButton}
              onPress={() => handleShareBarcode(barcode)}
            >
              <Ionicons name="share-outline" size={16} color="#8B5CF6" />
              <Text style={styles.actionText}>Share</Text>
            </TouchableOpacity>
          </View>
        )}
      </TouchableOpacity>
    );
  };

  if (isLoading) {
    return (
      <View style={styles.loadingContainer}>
        <LoadingSpinner size="large" />
        <Text style={styles.loadingText}>Loading barcodes...</Text>
      </View>
    );
  }

  return (
    <View style={styles.container}>
      <CaregiverNavbar
        title={isSelectionMode ? `${selectedBarcodes.length} Selected` : "Barcodes"}
        showBackButton={!isSelectionMode}
        onBackPress={() => {
          if (isSelectionMode) {
            setIsSelectionMode(false);
            setSelectedBarcodes([]);
          } else {
            navigation.goBack();
          }
        }}
        rightActions={
          isSelectionMode ? (
            <TouchableOpacity
              style={styles.cancelSelection}
              onPress={() => {
                setIsSelectionMode(false);
                setSelectedBarcodes([]);
              }}
            >
              <Text style={styles.cancelSelectionText}>Cancel</Text>
            </TouchableOpacity>
          ) : (
            <TouchableOpacity
              style={styles.selectButton}
              onPress={() => setIsSelectionMode(true)}
            >
              <Ionicons name="checkmark-circle-outline" size={20} color="#059669" />
            </TouchableOpacity>
          )
        }
      />

      <ScrollView
        style={styles.scrollView}
        contentContainerStyle={styles.scrollContent}
        refreshControl={
          <RefreshControl
            refreshing={refreshing}
            onRefresh={onRefresh}
            tintColor="#059669"
            colors={['#059669']}
          />
        }
        showsVerticalScrollIndicator={false}
      >
        {/* Header Section */}
        <LinearGradient
          colors={['#F0FDF4', '#FFFFFF']}
          style={styles.headerSection}
        >
          <View style={styles.headerContent}>
            <View style={styles.headerIcon}>
              <Ionicons name="qr-code" size={32} color="#059669" />
            </View>
            <Text style={styles.headerTitle}>Medication Barcodes</Text>
            <Text style={styles.headerSubtitle}>
              Manage and distribute barcodes for patient medications
            </Text>
          </View>
        </LinearGradient>

        {/* Stats Section */}
        <View style={styles.statsSection}>
          <View style={styles.statsGrid}>
            <View style={styles.statCard}>
              <Text style={styles.statNumber}>{recentBarcodes.length}</Text>
              <Text style={styles.statLabel}>Total Barcodes</Text>
            </View>
            <View style={styles.statCard}>
              <Text style={styles.statNumber}>
                {recentBarcodes.reduce((sum, b) => sum + b.downloadCount, 0)}
              </Text>
              <Text style={styles.statLabel}>Downloads</Text>
            </View>
            <View style={styles.statCard}>
              <Text style={styles.statNumber}>
                {new Set(recentBarcodes.map(b => b.patientId)).size}
              </Text>
              <Text style={styles.statLabel}>Patients</Text>
            </View>
          </View>
        </View>

        {/* Barcodes List */}
        <View style={styles.barcodesSection}>
          <View style={styles.sectionHeader}>
            <Text style={styles.sectionTitle}>Recent Barcodes</Text>
            <Text style={styles.sectionSubtitle}>Sorted by creation date (newest first)</Text>
          </View>

          <View style={styles.barcodesList}>
            {recentBarcodes.map(renderBarcodeCard)}
          </View>
        </View>

        {/* Generation Tip */}
        <View style={styles.tipSection}>
          <View style={styles.tipCard}>
            <View style={styles.tipIcon}>
              <Ionicons name="bulb-outline" size={24} color="#F59E0B" />
            </View>
            <View style={styles.tipContent}>
              <Text style={styles.tipTitle}>Need a new barcode?</Text>
              <Text style={styles.tipText}>
                Go to patient details and add or edit medications to generate new barcodes
              </Text>
            </View>
          </View>
        </View>
      </ScrollView>

      {/* Bulk Actions */}
      {isSelectionMode && selectedBarcodes.length > 0 && (
        <View style={styles.bulkActionsContainer}>
          <Button
            title={`Download (${selectedBarcodes.length})`}
            onPress={handleBulkDownload}
            variant="outline"
            style={styles.bulkButton}
            icon={<Ionicons name="download-outline" size={18} color="#059669" />}
          />
          <Button
            title={`Print (${selectedBarcodes.length})`}
            onPress={handleBulkPrint}
            style={styles.bulkButton}
            icon={<Ionicons name="print-outline" size={18} color="#FFFFFF" />}
          />
        </View>
      )}
      {selectedBarcode && (
  <PrintableBarcode
    visible={showPrintModal}
    onClose={() => {
      setShowPrintModal(false);
      setSelectedBarcode(null);
    }}
    patientName={selectedBarcode.patientName}
    barcodeData={selectedBarcode.barcodeData}
    medicationName={selectedBarcode.medicationName}
  />
)}
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F8FAFC',
  },
  scrollView: {
    flex: 1,
    marginTop: Platform.OS === 'ios' ? 114 : 70,
  },
  scrollContent: {
    paddingBottom: SPACING[6],
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#F8FAFC',
  },
  loadingText: {
    marginTop: SPACING[4],
    fontSize: TYPOGRAPHY.fontSize.md,
    color: '#64748B',
  },
  selectButton: {
    width: 36,
    height: 36,
    borderRadius: 18,
    backgroundColor: '#F0FDF4',
    justifyContent: 'center',
    alignItems: 'center',
    borderWidth: 1,
    borderColor: '#BBF7D0',
  },
  cancelSelection: {
    paddingHorizontal: SPACING[3],
    paddingVertical: SPACING[2],
  },
  cancelSelectionText: {
    fontSize: TYPOGRAPHY.fontSize.md,
    fontWeight: '500',
    color: '#059669',
  },
  headerSection: {
    paddingHorizontal: SPACING[5],
    paddingBottom: SPACING[6],
    paddingTop: SPACING[10],
    alignItems: 'center',
  },
  headerContent: {
    alignItems: 'center',
  },
  headerIcon: {
    width: 64,
    height: 64,
    borderRadius: 32,
    backgroundColor: '#FFFFFF',
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: SPACING[4],
    shadowColor: '#059669',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 8,
    elevation: 4,
  },
  headerTitle: {
    fontSize: TYPOGRAPHY.fontSize['2xl'],
    fontWeight: '700',
    color: '#1E293B',
    marginBottom: SPACING[2],
  },
  headerSubtitle: {
    fontSize: TYPOGRAPHY.fontSize.md,
    color: '#64748B',
    textAlign: 'center',
    lineHeight: 22,
  },
  statsSection: {
    paddingHorizontal: SPACING[5],
    paddingBottom: SPACING[5],
  },
  statsGrid: {
    flexDirection: 'row',
    backgroundColor: '#FFFFFF',
    borderRadius: RADIUS.xl,
    padding: SPACING[4],
    borderWidth: 1,
    borderColor: '#E2E8F0',
    gap: SPACING[4],
  },
  statCard: {
    flex: 1,
    alignItems: 'center',
  },
  statNumber: {
    fontSize: TYPOGRAPHY.fontSize['2xl'],
    fontWeight: '700',
    color: '#059669',
    marginBottom: SPACING[1],
  },
  statLabel: {
    fontSize: TYPOGRAPHY.fontSize.xs,
    color: '#64748B',
    textAlign: 'center',
    fontWeight: '500',
  },
  barcodesSection: {
    paddingHorizontal: SPACING[5],
  },
  sectionHeader: {
    marginBottom: SPACING[4],
  },
  sectionTitle: {
    fontSize: TYPOGRAPHY.fontSize.lg,
    fontWeight: '600',
    color: '#1E293B',
    marginBottom: SPACING[1],
  },
  sectionSubtitle: {
    fontSize: TYPOGRAPHY.fontSize.sm,
    color: '#64748B',
  },
  barcodesList: {
    gap: SPACING[4],
  },
  barcodeCard: {
    backgroundColor: '#FFFFFF',
    borderRadius: RADIUS.xl,
    padding: SPACING[5],
    borderWidth: 1,
    borderColor: '#E2E8F0',
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.05,
    shadowRadius: 3,
    elevation: 2,
  },
  selectedCard: {
    borderColor: '#059669',
    backgroundColor: '#F0FDF4',
  },
  selectionIndicator: {
    position: 'absolute',
    top: SPACING[3],
    right: SPACING[3],
    zIndex: 1,
  },
  barcodeHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: SPACING[4],
  },
  patientInfo: {
    flex: 1,
  },
  patientName: {
    fontSize: TYPOGRAPHY.fontSize.lg,
    fontWeight: '600',
    color: '#1E293B',
    marginBottom: SPACING[1],
  },
  medicationInfo: {
    fontSize: TYPOGRAPHY.fontSize.md,
    color: '#059669',
    fontWeight: '500',
    marginBottom: SPACING[1],
  },
  dosageDetails: {
    fontSize: TYPOGRAPHY.fontSize.sm,
    color: '#64748B',
  },
  barcodeStatus: {
    alignItems: 'flex-end',
  },
  createdDate: {
    fontSize: TYPOGRAPHY.fontSize.xs,
    color: '#94A3B8',
    marginBottom: SPACING[1],
  },
  downloadBadge: {
    flexDirection: 'row',
    alignItems: 'center',
    backgroundColor: '#F0FDF4',
    paddingHorizontal: SPACING[2],
    paddingVertical: SPACING[1],
    borderRadius: RADIUS.sm,
    gap: SPACING[1],
  },
  downloadCount: {
    fontSize: TYPOGRAPHY.fontSize.xs,
    color: '#059669',
    fontWeight: '600',
  },
  barcodeDisplay: {
    alignItems: 'center',
    backgroundColor: '#F8FAFC',
    borderRadius: RADIUS.lg,
    padding: SPACING[4],
    marginBottom: SPACING[4],
  },
  barcodeStripes: {
    flexDirection: 'row',
    alignItems: 'center',
    height: 40,
    marginBottom: SPACING[2],
    gap: 1,
  },
  barcodeStripe: {
    height: '100%',
  },
  barcodeText: {
    fontSize: TYPOGRAPHY.fontSize.sm,
    fontWeight: '600',
    color: '#1E293B',
    fontFamily: 'monospace',
    letterSpacing: 1,
  },
  barcodeActions: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    gap: SPACING[2],
  },
  actionButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    backgroundColor: '#F8FAFC',
    borderRadius: RADIUS.md,
    paddingVertical: SPACING[3],
    gap: SPACING[1],
    borderWidth: 1,
    borderColor: '#E2E8F0',
  },
  actionText: {
    fontSize: TYPOGRAPHY.fontSize.sm,
    fontWeight: '500',
    color: '#475569',
  },
  tipSection: {
    paddingHorizontal: SPACING[5],
    paddingTop: SPACING[6],
  },
  tipCard: {
    flexDirection: 'row',
    backgroundColor: '#FFFBEB',
    borderRadius: RADIUS.xl,
    padding: SPACING[4],
    borderWidth: 1,
    borderColor: '#FDE68A',
    alignItems: 'center',
  },
  tipIcon: {
    width: 44,
    height: 44,
    borderRadius: 22,
    backgroundColor: '#FEF3C7',
    justifyContent: 'center',
    alignItems: 'center',
    marginRight: SPACING[3],
  },
  tipContent: {
    flex: 1,
  },
  tipTitle: {
    fontSize: TYPOGRAPHY.fontSize.md,
    fontWeight: '600',
    color: '#92400E',
    marginBottom: SPACING[1],
  },
  tipText: {
    fontSize: TYPOGRAPHY.fontSize.sm,
    color: '#A16207',
    lineHeight: 18,
  },
  bulkActionsContainer: {
    flexDirection: 'row',
    paddingHorizontal: SPACING[5],
    paddingVertical: SPACING[4],
    backgroundColor: '#FFFFFF',
    borderTopWidth: 1,
    borderTopColor: '#E2E8F0',
    gap: SPACING[3],
  },
  bulkButton: {
    flex: 1,
  },
});

export default BarcodeGeneratorScreen;